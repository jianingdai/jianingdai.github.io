<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Unreal为例的游戏模式学习</title>
    <url>/2024/11/23/Unreal%E4%B8%BA%E4%BE%8B%E7%9A%84%E6%B8%B8%E6%88%8F%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="读前须知"><a href="#读前须知" class="headerlink" title="读前须知"></a>读前须知</h1><p>​	在学习这篇笔记之前需要先搭好Unreal Engine的环境，最好是源码版的可以跟着源码一起学习。如果没有相关的环境可以看一下我的这一篇笔记：<a href="/2024/11/20/UE5%E5%BC%95%E6%93%8E%E6%BA%90%E7%A0%81%E7%89%88%E7%BC%96%E8%AF%91%E5%92%8CWindows%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85/" title="UE5引擎源码版编译和Windows版本打包">UE5引擎源码版编译和Windows版本打包</a></p>
<p><strong>附：</strong></p>
<p>​	本笔记也作为我本人的课程作业的一种提交方式。可以直接点击：“<a href="#%E4%BD%9C%E4%B8%9A%E9%83%A8%E5%88%86">作业部分</a>”，跳转到对应的章节。</p>
<h1 id="什么是游戏模式："><a href="#什么是游戏模式：" class="headerlink" title="什么是游戏模式："></a>什么是游戏模式：</h1><p>​	游戏模式是游戏世界里面组织数据和运作规则的方式，例如：</p>
<ol>
<li>这些物体的共同点，不同点，怎么抽象？</li>
<li>世间万物以什么规则运行？</li>
<li>数据如何组织、描述？（就是想要变得内容以什么数据结构进行描述和组织？）</li>
</ol>
<p>这些都是游戏模式所要思考设计的内容。</p>
<h1 id="UE的Gameplay框架："><a href="#UE的Gameplay框架：" class="headerlink" title="UE的Gameplay框架："></a>UE的Gameplay框架：</h1><p>​	UE中的Gameplay框架包括核心系统和用于处理通用Gameplay元素的框架，如Actor、摄像机、组件、控制器、游戏规则、游戏模式、玩家输入、Gameplay定时器和用户界面。</p>
<h2 id="UE的万物之源：UObject"><a href="#UE的万物之源：UObject" class="headerlink" title="UE的万物之源：UObject"></a>UE的万物之源：UObject</h2><blockquote>
<p>参考：<a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/API">Unreal Engine C++ API Reference</a></p>
</blockquote>
<table>
<thead>
<tr>
<th align="center"></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="center">Module</td>
<td>CoreUObject</td>
</tr>
<tr>
<td align="center">Header</td>
<td>&#x2F;Engine&#x2F;Source&#x2F;Runtime&#x2F;CoreUObject&#x2F;Public&#x2F;UObject&#x2F;Object.h</td>
</tr>
<tr>
<td align="center">Include</td>
<td>#include “UObject&#x2F;Object.h”</td>
</tr>
<tr>
<td align="center">Source</td>
<td>&#x2F;Engine&#x2F;Source&#x2F;Runtime&#x2F;CoreUObject&#x2F;Private&#x2F;UObject&#x2F;UObjectGlobals.cpp</td>
</tr>
</tbody></table>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UObject</span>  </span><br><span class="line">(  </span><br><span class="line">    <span class="type">const</span> FObjectInitializer &amp; ObjectInitializer  </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>​	其中的特性有：</p>
<ul>
<li>元数据、反射生成、GC垃圾回收、序列化</li>
<li>通⽤属性和接⼝（Equals、Clone、GetHashCode、ToString、GetName、GetMetaData<br>等等）</li>
<li>每个物体是由原⼦构成的⸺uobject&#x3D;原⼦</li>
</ul>
<h2 id="物体的表达：Actor-ActorComponent"><a href="#物体的表达：Actor-ActorComponent" class="headerlink" title="物体的表达：Actor+ActorComponent"></a>物体的表达：Actor+ActorComponent</h2><p>​	所有可以放入关卡的对象都是 <strong>Actor</strong>，比如摄像机、静态网格体、玩家起始位置。Actor支持三维变换，例如平移、旋转和缩放。你可以通过游戏逻辑代码（C++或蓝图）创建（生成）或销毁Actor。</p>
<p>在C++中，AActor是所有Actor的基类。</p>
<p>注意：Actor不直接保存变换（位置、旋转和缩放）数据；如Actor的根组件存在，则使用它的变换数据。</p>
<p>​	Components是一种特殊类型的对象，Actor可以将其作为子对象附加到自己身上。Components对于共享公共行为非常有用，例如显示可视表示、播放声音等功能。它们还可以表示特定于项目的概念，例如车辆解释输入并改变自身速度和方向的方式。例如，一个包含用户可控制的汽车、飞机和船只的项目可以通过改变车辆Actor使用的组件来实现车辆控制和移动的差异。</p>
<blockquote>
<p>To be precise : <strong>Components</strong> are a special type of <strong>Object</strong> that <strong>Actors</strong> can attach to themselves as sub-objects. Components are useful for sharing common behaviors, such as the ability to display a visual representation, play sounds. They can also represent project-specific concepts, such as the way a vehicle interprets input and changes its own velocity and orientation. For example, a project with user-controllable cars, aircraft, and boats could implement the differences in vehicle control and movement by changing which Component a vehicle Actor uses.</p>
</blockquote>
<ul>
<li>EC架构（Entity-Component Framework）:⼀个实体和多种能⼒组合的设计模式。<ul>
<li>就像是⼀款即插即⽤，有了设备（Actor），插⼊设备（Component）就能⽤。</li>
</ul>
</li>
<li>SceneComponent赋予Actor空间变化信息:FTransform: Location, Rotation, Scale</li>
<li>舞台上的演员（Actor），各⾃⾝怀绝技（Component），为玩家上演⼀场精彩的游戏。</li>
</ul>
<h2 id="世界的表达：UWorld-ULevel"><a href="#世界的表达：UWorld-ULevel" class="headerlink" title="世界的表达：UWorld + ULevel"></a>世界的表达：UWorld + ULevel</h2><ul>
<li><p>平⾏世界:GameWorld、PIEWorld（编辑器世界）、PreviewWorld(预览）</p>
</li>
<li><p>关卡构成主⼲卡PersistentLevel+⼦关卡</p>
</li>
<li><p>关卡加载LevelStreaming流式异步加载</p>
<ol>
<li>WorldPartition(UE5)<ol>
<li>分成了许多layer（像是切割了许多⽔平⾯，位于不同的⽔平⾯上就会加载加载不同的范围）</li>
<li>每个layer会设置不同的加载范围，在范围内的就会加载</li>
</ol>
</li>
<li>WorldComposition</li>
<li>LoadByLogic</li>
</ol>
</li>
<li><p>关卡⼤⼩和加载距离</p>
<ul>
<li>LevelBounds + StreamingDistance分层</li>
<li>有多少个关卡，最⼤的覆盖的那个盒⼦</li>
</ul>
</li>
<li><p>关卡蓝图LevelScriptActor</p>
<ul>
<li>定义关卡规则⸺⽐如进⼊该关卡速度变慢之类的</li>
</ul>
</li>
</ul>
<h2 id="世界之上⸺UGameInstance-UEngine"><a href="#世界之上⸺UGameInstance-UEngine" class="headerlink" title="世界之上⸺UGameInstance + UEngine"></a>世界之上⸺UGameInstance + UEngine</h2><ul>
<li><p>UGameInstance</p>
<ul>
<li>信息存在于整个游戏的⽣命周期，不随着地图的切换和销毁</li>
<li>⾮常适合⾮业务逻辑的全局管理操作，如全局UI、设置、预加载</li>
</ul>
</li>
<li><p>UEngine</p>
<ul>
<li>管理GameInstance</li>
<li>拉起游戏重要流程</li>
<li>Browse、LoadMap、SetClientTrave…</li>
</ul>
</li>
<li><p>UE游戏拉起流程</p>
<ul>
<li>init–&gt;start–&gt;loadMap</li>
<li>loadMap中加载了许多内容，⽐如world、模型、player之类的</li>
</ul>
</li>
</ul>
<h1 id="UE游戏模式中的重要对象"><a href="#UE游戏模式中的重要对象" class="headerlink" title="UE游戏模式中的重要对象"></a>UE游戏模式中的重要对象</h1><h2 id="AActor：游戏中最重要的实体"><a href="#AActor：游戏中最重要的实体" class="headerlink" title="AActor：游戏中最重要的实体"></a>AActor：游戏中最重要的实体</h2><ul>
<li>根组件提供世界变化信息</li>
<li>作为⽹络同步的基础单位</li>
<li>标志所有权的Owner指针<ul>
<li>通过owner层层追溯，发射⼦弹伤害了某个敌⼈，追溯是谁伤害了敌⼈：⼦弹⸺枪⸺⻆⾊</li>
</ul>
</li>
<li>标志本地权限的Role枚举<ul>
<li>权威端，你说了算，服务器</li>
<li>主控端，本机</li>
<li>模拟端，看到的别的玩家的游玩</li>
</ul>
</li>
<li>⽣命周期<ul>
<li>分类</li>
<li>关卡内摆放的静态Actor<ul>
<li>从map⾥资源⾥拜访来的</li>
<li>最终还是会回到initially component⾥</li>
</ul>
</li>
</ul>
</li>
<li>SpawnActor创建的动态Actor<ol>
<li>本地Spawn</li>
<li>⽹络序列化</li>
</ol>
</li>
<li>重要的⽣命周期函数<ul>
<li>BeginPlay</li>
<li>EndPlay</li>
<li>Tick</li>
</ul>
</li>
<li>重要的⽣命周期函数<ul>
<li>BeginPlay◦ </li>
<li>Tick</li>
<li>EndPlay：在某些条件达成之后就误了<ul>
<li>处理结束之后怎么做</li>
</ul>
</li>
<li>GC完成收尾⼯作<ul>
<li>注意有效性的判断<ul>
<li>从level的数组⾥丢出去，⽆⼈认领</li>
<li>最后被GC回收了</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="APawn：例如国际象棋中的小兵"><a href="#APawn：例如国际象棋中的小兵" class="headerlink" title="APawn：例如国际象棋中的小兵"></a>APawn：例如国际象棋中的小兵</h2><blockquote>
<p>The <strong>Pawn</strong> class is the base class of all Actors that can be controlled by players or AI. A Pawn is the physical representation of a player or AI entity within the world. This not only means that the Pawn determines what the player or AI entity looks like visually, but also how it interacts with the world in terms of collisions and other physical interactions. This can be confusing in certain circumstances as some types of games may not have a visible player mesh or avatar within the game. Regardless, the Pawn still represents the physical location, rotation, etc. of a player or entity within the game. A Character is a special type of Pawn that has the ability to walk around.</p>
<p>By default, there is a one-to-one relationship between Controllers and Pawns; meaning, each Controller controls only one Pawn at any given time. Also, Pawns spawned during gameplay are not automatically possessed by a Controller.</p>
</blockquote>
<p>Pawn类是所有可以由玩家或AI控制的Actor的基类。棋子是玩家或AI实体在世界中的物理表示。这不仅意味着Pawn决定了玩家或AI实体在视觉上的样子，而且还决定了它在碰撞和其他物理交互方面如何与世界互动。这在某些情况下可能会令人困惑，因为某些类型的游戏可能在游戏内没有可见的玩家网格或化身。无论如何，棋子仍然代表游戏中玩家或实体的物理位置，旋转等。角色是一种特殊类型的棋子，有能力四处走动。</p>
<p>默认情况下，控制器和兵之间是一对一的关系;这意味着，每个控制器在任何给定时间只能控制一个兵。此外，游戏过程中产生的棋子不会自动被控制器拥有。</p>
<ul>
<li>可操控的</li>
<li>多种多样的形式<ul>
<li>⻋⼦、机甲（载具）</li>
</ul>
</li>
<li>被controller控制</li>
<li>基础的输⼊、移动框架的⽀持<ul>
<li>⽣产者消费者模型框架</li>
</ul>
</li>
<li>常⽤派⽣类<ul>
<li>ADefaultPawn<ul>
<li>简单球形碰撞 USphereComponent</li>
<li>简单外显 UStaticMeshComponent</li>
<li>简单移动组件 UFloatingPawnMovement</li>
<li>基础的键盘、⼿柄映射</li>
</ul>
</li>
</ul>
</li>
<li>ASpectatorPawn<ul>
<li>去掉外显 UStaticMeshComponent，不应该被别⼈看到</li>
<li>移动组件替换成忽略时间缩放的USpectatorPawnMovement<ul>
<li>观战的时候可以把全局暂停</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="ACharacter-人型角色"><a href="#ACharacter-人型角色" class="headerlink" title="ACharacter 人型角色"></a>ACharacter 人型角色</h2><h1 id="作业部分："><a href="#作业部分：" class="headerlink" title="作业部分："></a><span id = "作业部分">作业部分：<span></h1>]]></content>
      <categories>
        <category>UE5</category>
      </categories>
      <tags>
        <tag>UE5</tag>
      </tags>
  </entry>
  <entry>
    <title>UE5引擎源码版编译和Windows版本打包</title>
    <url>/2024/11/20/UE5%E5%BC%95%E6%93%8E%E6%BA%90%E7%A0%81%E7%89%88%E7%BC%96%E8%AF%91%E5%92%8CWindows%E7%89%88%E6%9C%AC%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="读前须知"><a href="#读前须知" class="headerlink" title="读前须知"></a>读前须知</h1><hr>
<p>​	这里先贴出来<a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/downloading-unreal-engine-source-code?application_version=5.4">Unreal Engine</a>的官方安装文档，本人就是跟着官方文档做的。这篇文章作为个人搭建记录和XX公司课程的作业提交。课程中网络相关问题均未提到，如果访问某些网站出现困难那么请自己寻求魔法。本文章目前只有windows版本的教程，mac和Linux的教程在我文章中提到的官方文档里均有提到。</p>
<h1 id="访问得到Github上的虚幻引擎的源代码"><a href="#访问得到Github上的虚幻引擎的源代码" class="headerlink" title="访问得到Github上的虚幻引擎的源代码"></a>访问得到Github上的虚幻引擎的源代码</h1><p>​	首先就是要有一个<a href="https://github.com/">GitHub</a>账号，没有的话要去注册一个。然后你可以看一下你的账号的profile中的Organizations中有没有epic这个标志，</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121004251563.png" alt="image-20241121004251563"></p>
<p>​	如果没有这个标志那么可以去<a href="https://www.unrealengine.com/zh-CN">Epic Games</a>登录然后在右上角可以点开自己的头像然后打开账户。要不然的话你点开UnrealEngine的源码仓库会出现访问404。</p>
<img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121002301539.png" alt="image-20241121002301539" style="zoom:;" />

<p>​	然后在左面点开应用与账户再点开右面的Github然后选择连接，按照操作进行关联就可以了。然后按照道理来说GitHub会发送邮件邀请你加入GitHub上的@EpicGames组织。你必须在7天内点击邮件内的 加入@EpicGames（Join @EpicGames） 按钮，才能完成GitHub与Epic Games账号的关联流程。但是我<strong>没有</strong>收到这份邮件，这个时候你不要急你等个几分钟然后去<a href="https://github.com/EpicGames">EpicGame的Github主页</a>这个时候你的页面上方应该会有一个消息提示其邀请你加入到Organizations中。如果没看见忘记点了也没事多刷新几次。</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121002700384.png" alt="image-20241121002700384"></p>
<p>​	等你加进组织之后再次访问就不会显示404了。然后你就可以进入到<a href="https://github.com/EpicGames/UnrealEngine">EpicGame的UnrealEngine仓库</a>中访问到Github上的虚幻引擎的源代码了。</p>
<h1 id="安装Visual-Studio-2022"><a href="#安装Visual-Studio-2022" class="headerlink" title="安装Visual Studio 2022"></a>安装Visual Studio 2022</h1><p>​	安装Visual Studio2022主要是用来编译和提供相关依赖。首先第一步访问<a href="https://visualstudio.microsoft.com/zh-hans/">VS</a>的官网然后点击下载Visual Studio安装程序，点开后选择我下图所展示的依赖点上：</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121125914604.png" alt="image-20241121125914604"></p>
<hr>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121125940979.png" alt="image-20241121125940979"></p>
<p>​	这一步官方也有详细文档指导，请点击这里：<a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/setting-up-visual-studio-development-environment-for-cplusplus-projects-in-unreal-engine?application_version=5.4">UE5相关VS安装指导</a>，如果你在之后遇到相关问题记得回来检查版本是否匹配，截至这篇post提交时，官方版本匹配指导见下图：</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121130715320.png" alt="image-20241121130715320"></p>
<p>​	另外vs还可以安装自己喜欢的插件和主题，然后自己也可以进行各种设置外观等，这些我就不在这里赘述了，想要搞得自己可以慢慢调教。</p>
<h1 id="下载源码并且进行初始化"><a href="#下载源码并且进行初始化" class="headerlink" title="下载源码并且进行初始化"></a>下载源码并且进行初始化</h1><p>​	下载源码有多种方式可以直接对于指定的branch进行clone，也可以直接下载zip压缩包解压。</p>
<h2 id="clone方法"><a href="#clone方法" class="headerlink" title="clone方法"></a>clone方法</h2><p>​	首先要确保你的电脑安装了git，并且你的GitHub上已经绑定了你的本地git的ssh公钥，直接在你想要装Unreal Engine的目录中打开控制台然后输入以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 1 --branch 5.4 git@github.com:EpicGames/UnrealEngine.git</span><br></pre></td></tr></table></figure>

<h2 id="下载zip压缩包"><a href="#下载zip压缩包" class="headerlink" title="下载zip压缩包"></a>下载zip压缩包</h2><p>​	直接点击我的右面这个连接：<a href="https://github.com/EpicGames/UnrealEngine/releases">点我</a>，就可以进到UE的Releases的界面了，然后找到你想要下载的版本点开Assets点击Source code(zip)，msi后缀的是win上的安装包。然后就可以进行下载了，当下载完后直接解压就行。例如像我下图所示（推荐下载有发行版的releases一般来说会比较稳定）：</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121132853132.png" alt="image-20241121132853132"></p>
<p>​	当做到这里的时候你应该已经获得了源码了（差不多有2个GB）。</p>
<h2 id="下载二进制文件等和开始编译"><a href="#下载二进制文件等和开始编译" class="headerlink" title="下载二进制文件等和开始编译"></a>下载二进制文件等和开始编译</h2><ol>
<li><p>在资源管理器中打开你的源代码文件夹，并运行 <code>Setup.bat</code>。</p>
<p>这样将下载引擎的二进制内容和先决程序，并设置虚幻文件关联。 在Windows 8上，可能会显示SmartScreen警告。请依次单击 <strong>更多信息</strong> 和 <strong>Run anyway</strong> 以继续。</p>
<p>引擎二进制文件的完整下载包需要一些时间（差不多20个GB）才能完成下载。 后续检出只需要下载增量部分，速度将会大幅提高。</p>
</li>
<li><p>运行 <code>GenerateProjectFiles.bat</code> 来为引擎创建项目文件。这个过程应该不超过一分钟即可完成。</p>
</li>
<li><p>双击 <code>UE5.sln</code> 文件以将项目加载到Visual Studio中。将你的解决方案配置设置为 <strong>开发编辑器</strong>，将解决方案平台设置为 <strong>Win64</strong>，然后右键单击 <strong>UE</strong> 目标并选择 <strong>构建</strong>。大概需要10-40分钟完成编译，具体取决于系统规格。这里我的电脑编译了有1个多小时差不多，反正就是很耗时了，对电脑的CPU和内存有较大要求，CPU越强时间越短。</p>
</li>
<li><p>编译完成后，可以将启动项目设置为 <strong>UE5</strong> 并按 <strong>F5</strong> 进行调试，以便从Visual Studio加载编辑器。</p>
<p><strong>（请一定确保按照操作进行操作，否则会损失很多时间）</strong></p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121133941806.png" alt="image-20241121133941806"></p>
</li>
</ol>
<h1 id="创建UE5工程并且开始打包"><a href="#创建UE5工程并且开始打包" class="headerlink" title="创建UE5工程并且开始打包"></a>创建UE5工程并且开始打包</h1><p>​	当你第一次打开UE客户端的时候因为需要进行着色所以的话会很耗时，然后打开客户端进行创建项目，注意以下几个点，项目名称最好别用中文，最好用英文。</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121134504003.png" alt="image-20241121134504003"></p>
<h2 id="Windows平台打包"><a href="#Windows平台打包" class="headerlink" title="Windows平台打包"></a>Windows平台打包</h2><p>​	然后像下图一样就可以进行游戏的初次打包了：</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121134620003.png" alt="image-20241121134620003"></p>
<h2 id="Android平台打包"><a href="#Android平台打包" class="headerlink" title="Android平台打包"></a>Android平台打包</h2><p>如果想要进行Android平台的打包记得要下载Android Studio进行SDK和NDK的安装，还有就是JAVA的SDK也是需要的一定要注意一下自己有没有安装相关工具链，如果安装成功了应该是我这个样子的：</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121134916922.png" alt="image-20241121134916922"></p>
<p>​	如果没有安装的话可以看一下这个链接：<a href="https://dev.epicgames.com/documentation/zh-cn/unreal-engine/set-up-android-sdk-ndk-and-android-studio-using-turnkey-for-unreal-engine">点我</a>，这个官方文档有着详细的说明。</p>
<h1 id="打包成果展示"><a href="#打包成果展示" class="headerlink" title="打包成果展示"></a>打包成果展示</h1><p>经过一段时间的编译然后就生成了如下图所示的打包成果：</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121174901797.png" alt="image-20241121174901797"></p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121175156226.png" alt="image-20241121175156226"></p>
<p>实机运行效果如图所示：</p>
<p><img src="https://raw.githubusercontent.com/jianingdai/Blog_img/main/imgimage-20241121175125192.png" alt="image-20241121175125192"></p>
<p>​	现在你成功制作了你自己的第一款游戏，具有逼真的物理模拟和极高的画质上限，现在你也可以叫自己为游戏制作工程师了~😍！</p>
<p>​	本教程到这里就结束了，如果还有什么问题可以在下面留言评论。</p>
]]></content>
      <categories>
        <category>UE5</category>
      </categories>
      <tags>
        <tag>UE5</tag>
      </tags>
  </entry>
</search>
